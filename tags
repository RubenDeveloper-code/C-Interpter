!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/ruben/Programacion/proyectosEstudio/c_interpreter/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
ADIOS	test/precompiler/undef/fortest/main.c	/^#define ADIOS /;"	d	file:
ALL_AST_SRC	Makefile	/^ALL_AST_SRC = src\/asttree\/*$/;"	m
ALL_PRECOMPILER_SRC	Makefile	/^ALL_PRECOMPILER_SRC = src\/precompiler\/precompiler.c \\$/;"	m
AMLOA	test/precompiler/conditions/fortest/main.c	/^#define AMLOA$/;"	d	file:
ARGS	include/precompiler/pre_defines.h	/^      char **ARGS;$/;"	m	struct:Define	typeref:typename:char **
ARGS	test/precompiler/defines/fortest/somemacros.h	/^#define ARGS /;"	d
ASTERISK	include/tokens.h	/^      const char ASTERISK;$/;"	m	struct:Token	typeref:typename:const char
ASTTOKENS	include/asttree/astTokens.h	/^} extern ASTTOKENS;$/;"	v	typeref:struct:ASTTokens extern
ASTTOKENS	src/asttree/astTokens.c	/^struct ASTTokens ASTTOKENS = {$/;"	v	typeref:struct:ASTTokens
ASTTokens	include/asttree/astTokens.h	/^struct ASTTokens {$/;"	s
BIN	Makefile	/^BIN = bin\/$/;"	m
BINARYNODE	include/asttree/nodes.h	/^enum TypeNode { SUPERNODE, BINARYNODE, CONSTNODE };$/;"	e	enum:TypeNode
BINARYNODESTOSTRING	src/asttree/graphicTree.c	/^char *BINARYNODESTOSTRING[] = {"DECL", "DEF", "IF", "WHILE"};$/;"	v	typeref:typename:char * []
BODY	include/asttree/nodes.h	/^enum TypeSuperNode { GLOBAL, BODYFOO, BODY };$/;"	e	enum:TypeSuperNode
BODYFOO	include/asttree/nodes.h	/^enum TypeSuperNode { GLOBAL, BODYFOO, BODY };$/;"	e	enum:TypeSuperNode
BRACKET_CLOSED	include/tokens.h	/^      const char BRACKET_CLOSED;$/;"	m	struct:Token	typeref:typename:const char
BRACKET_OPEN	include/tokens.h	/^      const char BRACKET_OPEN;$/;"	m	struct:Token	typeref:typename:const char
BUFFSIZE	include/asttree/declares.h	/^#define BUFFSIZE /;"	d
BUFFSIZE	include/precompiler/pre_skeleton.h	/^#define BUFFSIZE /;"	d
BUFFSIZE	src/asttree/generator.c	/^#define BUFFSIZE /;"	d	file:
BUFFSIZE	src/asttree/readerTokens.c	/^#define BUFFSIZE /;"	d	file:
BinaryNode	include/asttree/nodes.h	/^struct BinaryNode {$/;"	s
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -Wall$/;"	m
CHAR	include/asttree/nodes.h	/^enum TypeConstNode { INT, CHAR, STRING, FLOAT };$/;"	e	enum:TypeConstNode
CHARACTER	include/asttree/nodes.h	/^            char CHARACTER;$/;"	m	union:ConstNode::__anon1fb1ee4e010a	typeref:typename:char
CLOSED_PARENTHESIS	include/tokens.h	/^      const char CLOSED_PARENTHESIS;$/;"	m	struct:Token	typeref:typename:const char
COMA	include/tokens.h	/^      const char COMA;$/;"	m	struct:Token	typeref:typename:const char
CONSTNODE	include/asttree/nodes.h	/^enum TypeNode { SUPERNODE, BINARYNODE, CONSTNODE };$/;"	e	enum:TypeNode
CONSTNODETOSTRING	src/asttree/graphicTree.c	/^char *CONSTNODETOSTRING[] = {"INT", "CHAR", "STRING", "FLOAT"};$/;"	v	typeref:typename:char * []
ConstNode	include/asttree/nodes.h	/^struct ConstNode {$/;"	s
DECL	include/asttree/nodes.h	/^enum TypeBinaryNode { DECL, DEF, IF, WHILE };$/;"	e	enum:TypeBinaryNode
DEF	include/asttree/nodes.h	/^enum TypeBinaryNode { DECL, DEF, IF, WHILE };$/;"	e	enum:TypeBinaryNode
DEFINE	include/precompiler/pre_tokens.h	/^      const char *DEFINE;$/;"	m	struct:TokensPecompiler	typeref:typename:const char *
DEFINES	src/precompiler/pre_defines.c	/^struct Define *DEFINES[MAXBUFFVARS];$/;"	v	typeref:struct:Define * []
DEFINE_NOT_EXISTS	include/precompiler/pre_status.h	/^      DEFINE_NOT_EXISTS$/;"	e	enum:ERROR
Define	include/precompiler/pre_defines.h	/^struct Define {$/;"	s
ELSE	include/asttree/astTokens.h	/^      const char *ELSE;$/;"	m	struct:ASTTokens	typeref:typename:const char *
ELSE	include/precompiler/pre_tokens.h	/^      const char *ELSE;$/;"	m	struct:TokensPecompiler	typeref:typename:const char *
ENDIF	include/precompiler/pre_tokens.h	/^      const char *ENDIF;$/;"	m	struct:TokensPecompiler	typeref:typename:const char *
END_LINE	include/tokens.h	/^      const char END_LINE;$/;"	m	struct:Token	typeref:typename:const char
EQUAL	include/tokens.h	/^      const char EQUAL;$/;"	m	struct:Token	typeref:typename:const char
ERROR	include/precompiler/pre_status.h	/^enum ERROR {$/;"	g
ERROR	include/precompiler/pre_status.h	/^enum STATUS { SUCCESS, ERROR };$/;"	e	enum:STATUS
ERRORS	src/precompiler/pre_status.c	/^const char *ERRORS[] = {"", "syntax error %s in line %i",$/;"	v	typeref:typename:const char * []
FILE_NO_EXISTS	include/precompiler/pre_status.h	/^      FILE_NO_EXISTS,$/;"	e	enum:ERROR
FLOAT	include/asttree/nodes.h	/^            float FLOAT;$/;"	m	union:ConstNode::__anon1fb1ee4e010a	typeref:typename:float
FLOAT	include/asttree/nodes.h	/^enum TypeConstNode { INT, CHAR, STRING, FLOAT };$/;"	e	enum:TypeConstNode
FOR	include/asttree/astTokens.h	/^      const char *FOR;$/;"	m	struct:ASTTokens	typeref:typename:const char *
GETT	src/asttree/readerTokens.c	/^#define GETT /;"	d	file:
GLOBAL	include/asttree/nodes.h	/^enum TypeSuperNode { GLOBAL, BODYFOO, BODY };$/;"	e	enum:TypeSuperNode
HOLA	test/precompiler/conditions/fortest/main.c	/^#define HOLA$/;"	d	file:
HOLA	test/precompiler/includes/fortest/sum.h	/^#define HOLA /;"	d
HOLA	test/precompiler/undef/fortest/main.c	/^#define HOLA /;"	d	file:
IF	include/asttree/astTokens.h	/^      const char *IF;$/;"	m	struct:ASTTokens	typeref:typename:const char *
IF	include/asttree/nodes.h	/^enum TypeBinaryNode { DECL, DEF, IF, WHILE };$/;"	e	enum:TypeBinaryNode
IFDEF	include/precompiler/pre_tokens.h	/^      const char *IFDEF;$/;"	m	struct:TokensPecompiler	typeref:typename:const char *
IFNDEF	include/precompiler/pre_tokens.h	/^      const char *IFNDEF;$/;"	m	struct:TokensPecompiler	typeref:typename:const char *
INCLUDE	Makefile	/^INCLUDE = include\/$/;"	m
INCLUDE_FIELD_CLOSED	include/precompiler/pre_tokens.h	/^      const char INCLUDE_FIELD_CLOSED;$/;"	m	struct:TokensPecompiler	typeref:typename:const char
INCLUDE_FIELD_OPEN	include/precompiler/pre_tokens.h	/^      const char INCLUDE_FIELD_OPEN;$/;"	m	struct:TokensPecompiler	typeref:typename:const char
INCLUDE_FILE_NO_EXISTS	include/precompiler/pre_status.h	/^      INCLUDE_FILE_NO_EXISTS,$/;"	e	enum:ERROR
INCLUDE_ORDER	include/precompiler/pre_tokens.h	/^      const char *INCLUDE_ORDER;$/;"	m	struct:TokensPecompiler	typeref:typename:const char *
INT	include/asttree/nodes.h	/^enum TypeConstNode { INT, CHAR, STRING, FLOAT };$/;"	e	enum:TypeConstNode
INTEGER	include/asttree/nodes.h	/^            int INTEGER;$/;"	m	union:ConstNode::__anon1fb1ee4e010a	typeref:typename:int
INVALID	include/precompiler/pre_defines.h	/^#define INVALID /;"	d
JUDAS	test/precompiler/conditions/fortest/main.c	/^#define JUDAS$/;"	d	file:
JUMP_LINE	include/tokens.h	/^      const char JUMP_LINE;$/;"	m	struct:Token	typeref:typename:const char
LEND	src/asttree/readerTokens.c	/^#define LEND /;"	d	file:
MACRO	include/precompiler/pre_defines.h	/^enum TYPE { NORMAL, MACRO };$/;"	e	enum:TYPE
MAXBUFFVARS	include/precompiler/pre_defines.h	/^#define MAXBUFFVARS /;"	d
NONE	test/precompiler/defines/fortest/somemacros.h	/^#define NONE$/;"	d
NORMAL	include/precompiler/pre_defines.h	/^enum TYPE { NORMAL, MACRO };$/;"	e	enum:TYPE
Node	include/asttree/nodes.h	/^struct Node {$/;"	s
OPEN_PARENTHESIS	include/tokens.h	/^      const char OPEN_PARENTHESIS;$/;"	m	struct:Token	typeref:typename:const char
OUT	Makefile	/^OUT = bin\/rc$/;"	m
PRECOMPILE_ORDER	include/precompiler/pre_tokens.h	/^      const char PRECOMPILE_ORDER;$/;"	m	struct:TokensPecompiler	typeref:typename:const char
QUOTES	include/tokens.h	/^      const char QUOTES;$/;"	m	struct:Token	typeref:typename:const char
RESERVED_WORDS	src/tokens.c	/^struct ReservedWords RESERVED_WORDS = {"int", "char", "float"};$/;"	v	typeref:struct:ReservedWords
RETURN	include/asttree/astTokens.h	/^      const char *RETURN;$/;"	m	struct:ASTTokens	typeref:typename:const char *
ReservedWords	include/tokens.h	/^struct ReservedWords {$/;"	s
SLASH	include/tokens.h	/^      const char SLASH;$/;"	m	struct:Token	typeref:typename:const char
SPACE	include/tokens.h	/^      const char SPACE;$/;"	m	struct:Token	typeref:typename:const char
SRC	Makefile	/^SRC = src\/$/;"	m
STATUS	include/precompiler/pre_status.h	/^enum STATUS { SUCCESS, ERROR };$/;"	g
STRING	include/asttree/nodes.h	/^            char *STRING;$/;"	m	union:ConstNode::__anon1fb1ee4e010a	typeref:typename:char *
STRING	include/asttree/nodes.h	/^enum TypeConstNode { INT, CHAR, STRING, FLOAT };$/;"	e	enum:TypeConstNode
SUCCESS	include/precompiler/pre_status.h	/^enum STATUS { SUCCESS, ERROR };$/;"	e	enum:STATUS
SUPERNODE	include/asttree/nodes.h	/^enum TypeNode { SUPERNODE, BINARYNODE, CONSTNODE };$/;"	e	enum:TypeNode
SUPERNODETOSTRING	src/asttree/graphicTree.c	/^char *SUPERNODETOSTRING[] = {"GLOBAL", "BODYFOO", "BODY"};$/;"	v	typeref:typename:char * []
SYNTAX_ERROR	include/precompiler/pre_status.h	/^      SYNTAX_ERROR = 1,$/;"	e	enum:ERROR
SuperNode	include/asttree/nodes.h	/^struct SuperNode {$/;"	s
TESTS	Makefile	/^TESTS = test\/$/;"	m
TESTSBIN	Makefile	/^TESTSBIN = test\/bin\/$/;"	m
TEST_CONDITIONS_DIR	Makefile	/^TEST_CONDITIONS_DIR = test\/precompiler\/conditions$/;"	m
TEST_DECL_DIR	Makefile	/^TEST_DECL_DIR = test\/astTree\/declare$/;"	m
TEST_DEFINES_DIR	Makefile	/^TEST_DEFINES_DIR = test\/precompiler\/defines$/;"	m
TEST_INCLUDES_DIR	Makefile	/^TEST_INCLUDES_DIR = test\/precompiler\/includes$/;"	m
TEST_UNDEF_DIR	Makefile	/^TEST_UNDEF_DIR = test\/precompiler\/undef$/;"	m
TOKENS	Makefile	/^TOKENS = src\/tokens.c$/;"	m
TOKENS	src/tokens.c	/^struct Token TOKENS = {' ',  '"',  ',', '\/', '(', ')', '*',$/;"	v	typeref:struct:Token
TOKENS_PRECOMPILER	src/precompiler/pre_tokens.c	/^struct TokensPecompiler TOKENS_PRECOMPILER = {$/;"	v	typeref:struct:TokensPecompiler
TYPE	include/precompiler/pre_defines.h	/^enum TYPE { NORMAL, MACRO };$/;"	g
TYPES	include/asttree/astTokens.h	/^      const char *TYPES[];$/;"	m	struct:ASTTokens	typeref:typename:const char * []
TYPE_CHAR	include/asttree/generator.h	/^enum typedata { TYPE_INT, TYPE_CHAR, TYPE_FLOAT };$/;"	e	enum:typedata
TYPE_FLOAT	include/asttree/generator.h	/^enum typedata { TYPE_INT, TYPE_CHAR, TYPE_FLOAT };$/;"	e	enum:typedata
TYPE_INT	include/asttree/generator.h	/^enum typedata { TYPE_INT, TYPE_CHAR, TYPE_FLOAT };$/;"	e	enum:typedata
Token	include/tokens.h	/^struct Token {$/;"	s
TokensPecompiler	include/precompiler/pre_tokens.h	/^struct TokensPecompiler {$/;"	s
TypeBinaryNode	include/asttree/nodes.h	/^enum TypeBinaryNode { DECL, DEF, IF, WHILE };$/;"	g
TypeConstNode	include/asttree/nodes.h	/^enum TypeConstNode { INT, CHAR, STRING, FLOAT };$/;"	g
TypeNode	include/asttree/nodes.h	/^enum TypeNode { SUPERNODE, BINARYNODE, CONSTNODE };$/;"	g
TypeSuperNode	include/asttree/nodes.h	/^enum TypeSuperNode { GLOBAL, BODYFOO, BODY };$/;"	g
UNDEF	include/precompiler/pre_tokens.h	/^      const char *UNDEF;$/;"	m	struct:TokensPecompiler	typeref:typename:const char *
UNDERSCORE	include/tokens.h	/^      const char UNDERSCORE;$/;"	m	struct:Token	typeref:typename:const char
UNTILS	Makefile	/^UNTILS = src\/untils.c$/;"	m
VAL	include/asttree/nodes.h	/^      } VAL;$/;"	m	struct:ConstNode	typeref:union:ConstNode::__anon1fb1ee4e010a
VALID	include/precompiler/pre_defines.h	/^#define VALID /;"	d
WHILE	include/asttree/astTokens.h	/^      const char *WHILE;$/;"	m	struct:ASTTokens	typeref:typename:const char *
WHILE	include/asttree/nodes.h	/^enum TypeBinaryNode { DECL, DEF, IF, WHILE };$/;"	e	enum:TypeBinaryNode
ZERO_END	include/tokens.h	/^      const char ZERO_END;$/;"	m	struct:Token	typeref:typename:const char
_CHAR_	include/tokens.h	/^      const char *_CHAR_;$/;"	m	struct:ReservedWords	typeref:typename:const char *
_FLOAT_	include/tokens.h	/^      const char *_FLOAT_;$/;"	m	struct:ReservedWords	typeref:typename:const char *
_INT_	include/tokens.h	/^      const char *_INT_;$/;"	m	struct:ReservedWords	typeref:typename:const char *
_MAX_	test/precompiler/defines/fortest/somemacros.h	/^#define _MAX_(/;"	d
_POSIX1_SOURCE	include/precompiler/pre_skeleton.h	/^#define _POSIX1_SOURCE /;"	d
_POW_	test/precompiler/defines/fortest/somemacros.h	/^#define _POW_(/;"	d
_SUM_	test/precompiler/defines/fortest/somemacros.h	/^#define _SUM_(/;"	d
_TEXT_	test/precompiler/defines/fortest/somemacros.h	/^#define _TEXT_ /;"	d
__AST_TOKENS_H__	include/asttree/astTokens.h	/^#define __AST_TOKENS_H__$/;"	d
__DECLARE_H__	include/asttree/declares.h	/^#define __DECLARE_H__$/;"	d
__ERRORS_H__	include/precompiler/pre_status.h	/^#define __ERRORS_H__$/;"	d
__GENERATOR_H__	include/asttree/generator.h	/^#define __GENERATOR_H__$/;"	d
__GRAPHIC_VIEW_H__	include/asttree/graphicTree.h	/^#define __GRAPHIC_VIEW_H__$/;"	d
__NODES_H_	include/asttree/nodes.h	/^#define __NODES_H_$/;"	d
__PRECOMPILER_H__	include/precompiler/precompiler.h	/^#define __PRECOMPILER_H__$/;"	d
__PRE_CONDITIONAL_H__	include/precompiler/pre_conditional.h	/^#define __PRE_CONDITIONAL_H__$/;"	d
__PRE_DEFINES_H__	include/precompiler/pre_defines.h	/^#define __PRE_DEFINES_H__$/;"	d
__PRE_FGETCH_H__	include/precompiler/pre_fgetc.h	/^#define __PRE_FGETCH_H__$/;"	d
__PRE_INCLUDES_H__	include/precompiler/pre_includes.h	/^#define __PRE_INCLUDES_H__$/;"	d
__PRE_TOKENS_H__	include/precompiler/pre_tokens.h	/^#define __PRE_TOKENS_H__$/;"	d
__PRE_UTILS_H__	include/precompiler/pre_utils.h	/^#define __PRE_UTILS_H__$/;"	d
__READER_TOKENS_H__	include/asttree/readerTokens.h	/^#define __READER_TOKENS_H__$/;"	d
__TOKENS_H__	include/tokens.h	/^#define __TOKENS_H__$/;"	d
__UNTILS_H__	include/untils.h	/^#define __UNTILS_H__$/;"	d
__anon1fb1ee4e010a	include/asttree/nodes.h	/^      union {$/;"	u	struct:ConstNode
a	test/astTree/declare/main.c	/^int a;$/;"	v	typeref:typename:int
addDeclareArray	src/asttree/declares.c	/^void addDeclareArray(void *ptr) { ptrdarr = ptr; }$/;"	f	typeref:typename:void
addDeclareFoo	src/asttree/declares.c	/^void addDeclareFoo(void *ptr) { ptrdfoo = ptr; }$/;"	f	typeref:typename:void
addDeclareVar	src/asttree/declares.c	/^void addDeclareVar(void *ptr) { ptrdvar = ptr; }$/;"	f	typeref:typename:void
addVariableAndValue	src/precompiler/pre_defines.c	/^int addVariableAndValue(char *VARIABLE, char *VALUE) {$/;"	f	typeref:typename:int
adios	test/precompiler/conditions/fortest/main.c	/^char *adios = "Te digo adios desde un segundo nivel (IFDEF IFNDEF)";$/;"	v	typeref:typename:char *
alsedios	test/precompiler/conditions/fortest/main.c	/^char *alsedios = "Te dios adios desde segundo nivel else waos";$/;"	v	typeref:typename:char *
amlo	test/precompiler/conditions/fortest/main.c	/^char *amlo = "->NO EJTOY DEFIIIINIDO";$/;"	v	typeref:typename:char *
amlo	test/precompiler/conditions/fortest/main.c	/^char *amlo = "HAY ESTAN LAJ MAJACRES JEJEJEJE";$/;"	v	typeref:typename:char *
b	test/astTree/declare/main.c	/^int b;$/;"	v	typeref:typename:int
c	test/astTree/declare/main.c	/^int c;$/;"	v	typeref:typename:int
clearDefines	src/precompiler/pre_defines.c	/^void clearDefines() {$/;"	f	typeref:typename:void
contNodes	include/asttree/nodes.h	/^      int contNodes;$/;"	m	struct:SuperNode	typeref:typename:int
d	test/astTree/declare/main.c	/^int d;$/;"	v	typeref:typename:int
declaresArr	src/asttree/declares.c	/^void *declaresArr[BUFFSIZE];$/;"	v	typeref:typename:void * []
declaresFoo	src/asttree/declares.c	/^void *declaresFoo[BUFFSIZE];$/;"	v	typeref:typename:void * []
declaresVar	src/asttree/declares.c	/^void *declaresVar[BUFFSIZE];$/;"	v	typeref:typename:void * []
e	test/astTree/declare/main.c	/^int e;$/;"	v	typeref:typename:int
existsVar	src/precompiler/pre_defines.c	/^int existsVar(const char *VARIABLE) {$/;"	f	typeref:typename:int
f	test/astTree/declare/main.c	/^int f;$/;"	v	typeref:typename:int
ffgetc	src/precompiler/pre_fgetc.c	/^int ffgetc(FILE *stream) {$/;"	f	typeref:typename:int
ffgetcUntil	src/precompiler/pre_utils.c	/^char *ffgetcUntil(FILE *stream, char limit) {$/;"	f	typeref:typename:char *
filterPrecompileOrder	src/precompiler/precompiler.c	/^int filterPrecompileOrder(FILE *stream, FILE *stream_out, char *file_src_path) {$/;"	f	typeref:typename:int
filterTypeNodeBin	src/asttree/generator.c	/^enum TypeBinaryNode filterTypeNodeBin(char *line) {$/;"	f	typeref:enum:TypeBinaryNode
freeOffset	src/asttree/readerTokens.c	/^void freeOffset() { getToken(NULL, 0, 0, -1); }$/;"	f	typeref:typename:void
funputc	src/precompiler/pre_utils.c	/^void funputc(FILE *stream) {$/;"	f	typeref:typename:void
genDeclNode	src/asttree/generator.c	/^void *genDeclNode(char *line) {$/;"	f	typeref:typename:void *
genRandomId	src/asttree/graphicTree.c	/^int genRandomId() {$/;"	f	typeref:typename:int
genTree	src/asttree/graphicTree.c	/^void genTree(void *fatherNode, char *outFile) {$/;"	f	typeref:typename:void
generateFile	src/asttree/generator.c	/^void *generateFile(char *file) {$/;"	f	typeref:typename:void *
generateNode	src/asttree/generator.c	/^void *generateNode(char *line) {$/;"	f	typeref:typename:void *
getArrayMacroArgs	src/precompiler/pre_defines.c	/^void getArrayMacroArgs(char **dest, char *src) {$/;"	f	typeref:typename:void
getDefineValue	src/precompiler/pre_defines.c	/^char *getDefineValue(FILE *stream) {$/;"	f	typeref:typename:char *
getDefineVariable	src/precompiler/pre_defines.c	/^char *getDefineVariable(FILE *stream) {$/;"	f	typeref:typename:char *
getIncludeFile	src/precompiler/pre_includes.c	/^char *getIncludeFile(FILE *stream) {$/;"	f	typeref:typename:char *
getLine	src/asttree/generator.c	/^char *getLine(FILE *STREAM) {$/;"	f	typeref:typename:char *
getMacroArgs	src/precompiler/pre_defines.c	/^void getMacroArgs(char *argsMacro, char *src) {$/;"	f	typeref:typename:void
getMacroArgsCall	src/precompiler/pre_defines.c	/^void getMacroArgsCall(char *argsCallMacro, char *pos) {$/;"	f	typeref:typename:void
getMacroName	src/precompiler/pre_defines.c	/^void getMacroName(char *nameMacro, char *src) {$/;"	f	typeref:typename:void
getNTokens	src/asttree/readerTokens.c	/^int getNTokens(char *line) {$/;"	f	typeref:typename:int
getNextToken	src/asttree/readerTokens.c	/^char *getNextToken(char *line) { return getToken(line, GETT, 0, 0); }$/;"	f	typeref:typename:char *
getToken	src/asttree/readerTokens.c	/^char *getToken(char *line, int typeRead, int indexStart, int ofs) {$/;"	f	typeref:typename:char *
hola	test/precompiler/conditions/fortest/main.c	/^char *hola = "Estoy dentro de un bloque ifdef HOLA";$/;"	v	typeref:typename:char *
holse	test/precompiler/conditions/fortest/main.c	/^char *holse = "->Estoy dentro de un bloque ifdef HOLA else ";$/;"	v	typeref:typename:char *
ifwrt	src/precompiler/precompiler.c	/^int ifwrt[2048];$/;"	v	typeref:typename:int[2048]
includeFile	src/precompiler/pre_includes.c	/^int includeFile(char *file, FILE *stream_out, char *path_src) {$/;"	f	typeref:typename:int
isBetweenQuotes	src/untils.c	/^int isBetweenQuotes(char *token, int lenght_token, char *line) {$/;"	f	typeref:typename:int
isDefined	src/precompiler/pre_conditional.c	/^int isDefined(char *token) { return existsVar(token); }$/;"	f	typeref:typename:int
isTypeData	src/asttree/generator.c	/^int isTypeData(char *token) {$/;"	f	typeref:typename:int
judas	test/precompiler/conditions/fortest/main.c	/^char *judas = "->thiiiiiiiiiiiiiiiiiiiiiiiiis iiiiiiiiiiiis the pain ki ller";$/;"	v	typeref:typename:char *
left	include/asttree/nodes.h	/^      struct Node *left;$/;"	m	struct:BinaryNode	typeref:struct:Node *
lendFirstToken	src/asttree/readerTokens.c	/^char *lendFirstToken(char *line) { return getToken(line, LEND, 0, 0); }$/;"	f	typeref:typename:char *
lendLastToken	src/asttree/readerTokens.c	/^char *lendLastToken(char *line) {$/;"	f	typeref:typename:char *
lendNextToken	src/asttree/readerTokens.c	/^char *lendNextToken(char *line) { return getToken(line, LEND, 0, 0); }$/;"	f	typeref:typename:char *
lendToken	src/asttree/readerTokens.c	/^char *lendToken(char *line, int index) {$/;"	f	typeref:typename:char *
main	test/astTree/declare/testdecl.c	/^int main() {$/;"	f	typeref:typename:int
main	test/precompiler/conditions/conditionstest.c	/^int main() {$/;"	f	typeref:typename:int
main	test/precompiler/defines/definestest.c	/^int main() {$/;"	f	typeref:typename:int
main	test/precompiler/defines/fortest/main.c	/^int main(ARGS) {$/;"	f	typeref:typename:int
main	test/precompiler/defines/results/main.c	/^int main(int argc,char*argv[]){$/;"	f	typeref:typename:int
main	test/precompiler/includes/fortest/main.c	/^int main() {$/;"	f	typeref:typename:int
main	test/precompiler/includes/results/main.c	/^int main(){$/;"	f	typeref:typename:int
main	test/precompiler/includes/test.c	/^int main() {$/;"	f	typeref:typename:int
main	test/precompiler/undef/testundef.c	/^int main() {$/;"	f	typeref:typename:int
manageSpaces	src/precompiler/pre_fgetc.c	/^void manageSpaces(FILE *stream, char *token, char *prevToken) {$/;"	f	typeref:typename:void
nLines	src/precompiler/pre_status.c	/^int nLines = 0;$/;"	v	typeref:typename:int
name	include/precompiler/pre_defines.h	/^      char *name;$/;"	m	struct:Define	typeref:typename:char *
nextNodeData	src/asttree/graphicTree.c	/^char *nextNodeData(struct Node *node) {$/;"	f	typeref:typename:char *
node	include/asttree/nodes.h	/^      void *node;$/;"	m	struct:Node	typeref:typename:void *
nodeType	src/asttree/generator.c	/^int nodeType(char *token) {$/;"	f	typeref:typename:int
nodes	include/asttree/nodes.h	/^      struct Node **nodes;$/;"	m	struct:SuperNode	typeref:struct:Node **
openIfs	src/precompiler/precompiler.c	/^int openIfs = -1;$/;"	v	typeref:typename:int
precompile	src/precompiler/precompiler.c	/^int precompile(FILE *stream, char *path_src) {$/;"	f	typeref:typename:int
precompileAll	src/precompiler/precompiler.c	/^int precompileAll(char *files[], int nfiles, char *out_path) {$/;"	f	typeref:typename:int
precompileFile	src/precompiler/precompiler.c	/^int precompileFile(char *file, char *out_path) {$/;"	f	typeref:typename:int
prepareMacro	src/precompiler/pre_defines.c	/^int prepareMacro(char *dest, char **prototipeARGS, char **callARGS) {$/;"	f	typeref:typename:int
prepareOutFileName	src/precompiler/precompiler.c	/^char *prepareOutFileName(char *in_file, char *out_path) {$/;"	f	typeref:typename:char *
ptrdarr	src/asttree/declares.c	/^void *ptrdarr = declaresArr;$/;"	v	typeref:typename:void *
ptrdfoo	src/asttree/declares.c	/^void *ptrdfoo = declaresFoo;$/;"	v	typeref:typename:void *
ptrdvar	src/asttree/declares.c	/^void *ptrdvar = declaresVar;$/;"	v	typeref:typename:void *
reportFatalError	src/precompiler/pre_status.c	/^void reportFatalError(int nLine, enum ERROR ERROR_CODE, char *extra_info) {$/;"	f	typeref:typename:void
res	test/precompiler/includes/fortest/res.c	/^int res(int a, int b) { return a + b; }$/;"	f	typeref:typename:int
res	test/precompiler/includes/results/res.c	/^int res(int a,int b){return a+b;}$/;"	f	typeref:typename:int
resolveDefines	src/precompiler/pre_defines.c	/^int resolveDefines(char *line) {$/;"	f	typeref:typename:int
right	include/asttree/nodes.h	/^      struct Node *right;$/;"	m	struct:BinaryNode	typeref:struct:Node *
skipComments	src/precompiler/pre_fgetc.c	/^void skipComments(FILE *stream, char *token, char *prevToken) {$/;"	f	typeref:typename:void
start	src/asttree/graphicTree.c	/^void start(struct Node *node, FILE *STREAM_OUT, int id) {$/;"	f	typeref:typename:void
stream_out	src/precompiler/precompiler.c	/^FILE *stream_out;$/;"	v	typeref:typename:FILE *
sum	test/precompiler/includes/fortest/sum.c	/^int sum(int a, int b) { return a + b; }$/;"	f	typeref:typename:int
sum	test/precompiler/includes/results/sum.c	/^int sum(int a,int b){return a+b;}$/;"	f	typeref:typename:int
testASTDecl	Makefile	/^testASTDecl:$/;"	t
testConditions	Makefile	/^testConditions:$/;"	t
testDefines	Makefile	/^testDefines:$/;"	t
testIncludes	Makefile	/^testIncludes:$/;"	t
testUndef	Makefile	/^testUndef:$/;"	t
tests	Makefile	/^tests: testIncludes testDefines testConditions testUndef$/;"	t
texto	test/precompiler/conditions/fortest/main.c	/^char *texto = "soy texto independiente a los bloques, si no me ves preocupate";$/;"	v	typeref:typename:char *
textos	test/precompiler/conditions/fortest/main.c	/^char *textos = "->hola soy la cabecera del codigo, preocupate si no estoy";$/;"	v	typeref:typename:char *
type	include/asttree/nodes.h	/^      enum TypeBinaryNode type;$/;"	m	struct:BinaryNode	typeref:enum:TypeBinaryNode
type	include/asttree/nodes.h	/^      enum TypeConstNode type;$/;"	m	struct:ConstNode	typeref:enum:TypeConstNode
type	include/asttree/nodes.h	/^      enum TypeNode type;$/;"	m	struct:Node	typeref:enum:TypeNode
type	include/asttree/nodes.h	/^      enum TypeSuperNode type;$/;"	m	struct:SuperNode	typeref:enum:TypeSuperNode
type	include/precompiler/pre_defines.h	/^      enum TYPE type;$/;"	m	struct:Define	typeref:enum:TYPE
typedata	include/asttree/generator.h	/^enum typedata { TYPE_INT, TYPE_CHAR, TYPE_FLOAT };$/;"	g
undefVar	src/precompiler/pre_defines.c	/^int undefVar(const char *VARIABLE) {$/;"	f	typeref:typename:int
valid	include/precompiler/pre_defines.h	/^      int valid;$/;"	m	struct:Define	typeref:typename:int
value	include/precompiler/pre_defines.h	/^      char *value;$/;"	m	struct:Define	typeref:typename:char *
variableIndex	src/precompiler/pre_defines.c	/^int variableIndex = 0;$/;"	v	typeref:typename:int
wrte	src/precompiler/precompiler.c	/^int wrte = 1;$/;"	v	typeref:typename:int
