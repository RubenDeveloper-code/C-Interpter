!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/ruben/Programacion/proyectosEstudio/c_interpreter/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
ARGS	src/precompiler.c	/^      char **ARGS;$/;"	m	struct:Define	typeref:typename:char **	file:
ASTERISK	src/precompiler.c	/^      const char ASTERISK;$/;"	m	struct:Token	typeref:typename:const char	file:
BIN	Makefile	/^BIN = bin\/$/;"	m
BUFFSIZE	src/precompiler.c	/^#define BUFFSIZE /;"	d	file:
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -Wall$/;"	m
CLOSED_PARENTHESIS	src/precompiler.c	/^      const char CLOSED_PARENTHESIS;$/;"	m	struct:Token	typeref:typename:const char	file:
COMA	src/precompiler.c	/^      const char COMA;$/;"	m	struct:Token	typeref:typename:const char	file:
DEFINE	src/precompiler.c	/^      const char *DEFINE;$/;"	m	struct:Token	typeref:typename:const char *	file:
DEFINES	src/precompiler.c	/^} *DEFINES[BUFFSIZE];$/;"	v	typeref:struct:Define * []
Define	src/precompiler.c	/^struct Define {$/;"	s	file:
ENDIF	src/precompiler.c	/^      const char *ENDIF;$/;"	m	struct:Token	typeref:typename:const char *	file:
END_LINE	src/precompiler.c	/^      const char END_LINE;$/;"	m	struct:Token	typeref:typename:const char	file:
FILE_NOT_EXISTS	include/status.h	/^enum STATUS { SUCCESS, FILE_NOT_EXISTS, SYNTAX_ERROR };$/;"	e	enum:STATUS
IFDEF	src/precompiler.c	/^      const char *IFDEF;$/;"	m	struct:Token	typeref:typename:const char *	file:
IFNDEF	src/precompiler.c	/^      const char *IFNDEF;$/;"	m	struct:Token	typeref:typename:const char *	file:
INCLUDE	Makefile	/^INCLUDE = include\/$/;"	m
INCLUDE_FIELD_CLOSED	src/precompiler.c	/^      const char INCLUDE_FIELD_CLOSED;$/;"	m	struct:Token	typeref:typename:const char	file:
INCLUDE_FIELD_OPEN	src/precompiler.c	/^      const char INCLUDE_FIELD_OPEN;$/;"	m	struct:Token	typeref:typename:const char	file:
INCLUDE_ORDER	src/precompiler.c	/^      const char *INCLUDE_ORDER;$/;"	m	struct:Token	typeref:typename:const char *	file:
MACRO	src/precompiler.c	/^enum TYPE { NORMAL, MACRO };$/;"	e	enum:TYPE	file:
NORMAL	src/precompiler.c	/^enum TYPE { NORMAL, MACRO };$/;"	e	enum:TYPE	file:
OPEN_PARENTHESIS	src/precompiler.c	/^      const char OPEN_PARENTHESIS;$/;"	m	struct:Token	typeref:typename:const char	file:
OUT	Makefile	/^OUT = bin\/rc$/;"	m
PRECOMPILE_ORDER	src/precompiler.c	/^      const char PRECOMPILE_ORDER;$/;"	m	struct:Token	typeref:typename:const char	file:
QUOTES	src/precompiler.c	/^      const char QUOTES;$/;"	m	struct:Token	typeref:typename:const char	file:
SLASH	src/precompiler.c	/^      const char SLASH;$/;"	m	struct:Token	typeref:typename:const char	file:
SPACE	src/precompiler.c	/^      const char SPACE;$/;"	m	struct:Token	typeref:typename:const char	file:
SRC	Makefile	/^SRC = src\/$/;"	m
STATUS	include/status.h	/^enum STATUS { SUCCESS, FILE_NOT_EXISTS, SYNTAX_ERROR };$/;"	g
SUCCESS	include/status.h	/^enum STATUS { SUCCESS, FILE_NOT_EXISTS, SYNTAX_ERROR };$/;"	e	enum:STATUS
SYNTAX_ERROR	include/status.h	/^enum STATUS { SUCCESS, FILE_NOT_EXISTS, SYNTAX_ERROR };$/;"	e	enum:STATUS
TESTS	Makefile	/^TESTS = test\/$/;"	m
TESTSBIN	Makefile	/^TESTSBIN = test\/bin\/$/;"	m
TOKENS	src/precompiler.c	/^} TOKENS = {' ', '"',  ',',      '\/',     '(',      ')',$/;"	v	typeref:struct:Token
TYPE	src/precompiler.c	/^enum TYPE { NORMAL, MACRO };$/;"	g	file:
Token	src/precompiler.c	/^struct Token {$/;"	s	file:
UNDERSCORE	src/precompiler.c	/^      const char UNDERSCORE;$/;"	m	struct:Token	typeref:typename:const char	file:
ZERO_END	src/precompiler.c	/^      const char ZERO_END;$/;"	m	struct:Token	typeref:typename:const char	file:
_POSIX1_SOURCE	src/precompiler.c	/^#define _POSIX1_SOURCE /;"	d	file:
__ERRORS_H__	include/status.h	/^#define __ERRORS_H__$/;"	d
__PRECOMPILER_H__	include/precompiler.h	/^#define __PRECOMPILER_H__$/;"	d
addVariableAndValue	src/precompiler.c	/^int addVariableAndValue(char *VARIABLE, char *VALUE) {$/;"	f	typeref:typename:int
ffgetc	src/precompiler.c	/^char ffgetc(FILE *stream) {$/;"	f	typeref:typename:char
filterPrecompileOrder	src/precompiler.c	/^int filterPrecompileOrder(FILE *stream, FILE *stream_out, char *path_src) {$/;"	f	typeref:typename:int
funcionDeltest2	test2.c	/^void funcionDeltest2() { funcionDeltest3(); }$/;"	f	typeref:typename:void
funcionDeltest3	test3.c	/^void funcionDeltest3() { printf("hola mundo 3"); }$/;"	f	typeref:typename:void
funputc	src/precompiler.c	/^void funputc(FILE *stream) {$/;"	f	typeref:typename:void
getDefineValue	src/precompiler.c	/^char *getDefineValue(FILE *stream) {$/;"	f	typeref:typename:char *
getDefineVariable	src/precompiler.c	/^char *getDefineVariable(FILE *stream) {$/;"	f	typeref:typename:char *
getIncludeFile	src/precompiler.c	/^char *getIncludeFile(FILE *stream) {$/;"	f	typeref:typename:char *
getMacroArgs	src/precompiler.c	/^void getMacroArgs(char *src, char *argsMacro) {$/;"	f	typeref:typename:void
getMacroArgsCall	src/precompiler.c	/^void getMacroArgsCall(char *pos, char *argsCallMacro) {$/;"	f	typeref:typename:void
getMacroID	src/precompiler.c	/^void getMacroID(char **dest, char *src) {$/;"	f	typeref:typename:void
getMacroName	src/precompiler.c	/^void getMacroName(char *src, char *nameMacro) {$/;"	f	typeref:typename:void
includeFile	src/precompiler.c	/^int includeFile(char *file, FILE *stream_out, char *path_src) {$/;"	f	typeref:typename:int
main	a.c	/^int main() {$/;"	f	typeref:typename:int
main	test.c	/^int main() {$/;"	f	typeref:typename:int
main	test/includes/fortest/main.c	/^int main() {$/;"	f	typeref:typename:int
main	test/includes/results/main.c.c	/^int main() {$/;"	f	typeref:typename:int
main	test/includes/test.c	/^int main() {$/;"	f	typeref:typename:int
main	test/testPrecompiles.c	/^int main() {$/;"	f	typeref:typename:int
manageSpaces	src/precompiler.c	/^void manageSpaces(FILE *stream, char *token, char *prevToken) {$/;"	f	typeref:typename:void
nLines	src/precompiler.c	/^int nLines;$/;"	v	typeref:typename:int
name	src/precompiler.c	/^      char *name;$/;"	m	struct:Define	typeref:typename:char *	file:
precompile	src/precompiler.c	/^int precompile(FILE *stream, char *path_src) {$/;"	f	typeref:typename:int
precompileAll	src/precompiler.c	/^int precompileAll(char *files[], int nfiles, char *out_path) {$/;"	f	typeref:typename:int
precompileFile	src/precompiler.c	/^int precompileFile(char *file, char *out_path) {$/;"	f	typeref:typename:int
prepareMacro	src/precompiler.c	/^int prepareMacro(char *dest, char **prototipeARGS, char **callARGS) {$/;"	f	typeref:typename:int
reportFileError	src/status.c	/^void reportFileError(int nLine, char *file) {$/;"	f	typeref:typename:void
reportPrecompileSyntaxError	src/status.c	/^void reportPrecompileSyntaxError(int nLine, char *extraInfo) {$/;"	f	typeref:typename:void
res	test/includes/fortest/res.c	/^int res(int a, int b) { return a + b; }$/;"	f	typeref:typename:int
res	test/includes/results/res.c	/^aaa int res(int a, int b) { return a + b; }$/;"	f	typeref:typename:aaa int
res	test/includes/results/res.c.c	/^int res(int a,int b){return a+b;}$/;"	f	typeref:typename:int
resolveDefines	src/precompiler.c	/^int resolveDefines(char *line) {$/;"	f	typeref:typename:int
skipComments	src/precompiler.c	/^void skipComments(FILE *stream, char *token, char *prevToken) {$/;"	f	typeref:typename:void
stream_out	src/precompiler.c	/^FILE *stream_out;$/;"	v	typeref:typename:FILE *
sum	test/includes/fortest/sum.c	/^int sum(int a, int b) { return a + b; }$/;"	f	typeref:typename:int
sum	test/includes/results/sum.c.c	/^int sum(int a,int b){return a+b;}$/;"	f	typeref:typename:int
sumamismo	test2.h	/^#define sumamismo(/;"	d
testIncludes	Makefile	/^testIncludes:$/;"	t
testVariables	src/precompiler.c	/^void testVariables() {$/;"	f	typeref:typename:void
type	src/precompiler.c	/^      enum TYPE type;$/;"	m	struct:Define	typeref:enum:TYPE	file:
value	src/precompiler.c	/^      char *value;$/;"	m	struct:Define	typeref:typename:char *	file:
variableIndex	src/precompiler.c	/^int variableIndex = 0;$/;"	v	typeref:typename:int
